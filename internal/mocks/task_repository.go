// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/personal/task-management/internal/repositories (interfaces: TaskRepository)
//
// Generated by this command:
//
//	mockgen -destination=./task_repository.go -package=mocks github.com/personal/task-management/internal/repositories TaskRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	task "github.com/personal/task-management/internal/domain/task"
	repository "github.com/personal/task-management/internal/repositories"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
	isgomock struct{}
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskRepository) Create(ctx context.Context, task *task.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTaskRepositoryMockRecorder) Create(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskRepository)(nil).Create), ctx, task)
}

// Delete mocks base method.
func (m *MockTaskRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskRepository)(nil).Delete), ctx, id)
}

// FindByAssignee mocks base method.
func (m *MockTaskRepository) FindByAssignee(ctx context.Context, assigneeID uuid.UUID) ([]*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAssignee", ctx, assigneeID)
	ret0, _ := ret[0].([]*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAssignee indicates an expected call of FindByAssignee.
func (mr *MockTaskRepositoryMockRecorder) FindByAssignee(ctx, assigneeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAssignee", reflect.TypeOf((*MockTaskRepository)(nil).FindByAssignee), ctx, assigneeID)
}

// FindByCreator mocks base method.
func (m *MockTaskRepository) FindByCreator(ctx context.Context, creatorID uuid.UUID) ([]*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCreator", ctx, creatorID)
	ret0, _ := ret[0].([]*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCreator indicates an expected call of FindByCreator.
func (mr *MockTaskRepositoryMockRecorder) FindByCreator(ctx, creatorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCreator", reflect.TypeOf((*MockTaskRepository)(nil).FindByCreator), ctx, creatorID)
}

// FindByDueDateRange mocks base method.
func (m *MockTaskRepository) FindByDueDateRange(ctx context.Context, start, end time.Time) ([]*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByDueDateRange", ctx, start, end)
	ret0, _ := ret[0].([]*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDueDateRange indicates an expected call of FindByDueDateRange.
func (mr *MockTaskRepositoryMockRecorder) FindByDueDateRange(ctx, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDueDateRange", reflect.TypeOf((*MockTaskRepository)(nil).FindByDueDateRange), ctx, start, end)
}

// FindByStatus mocks base method.
func (m *MockTaskRepository) FindByStatus(ctx context.Context, status task.Status) ([]*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByStatus", ctx, status)
	ret0, _ := ret[0].([]*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByStatus indicates an expected call of FindByStatus.
func (mr *MockTaskRepositoryMockRecorder) FindByStatus(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByStatus", reflect.TypeOf((*MockTaskRepository)(nil).FindByStatus), ctx, status)
}

// GetByID mocks base method.
func (m *MockTaskRepository) GetByID(ctx context.Context, id uuid.UUID) (*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTaskRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTaskRepository)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockTaskRepository) List(ctx context.Context, filter repository.TaskFilter) ([]*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTaskRepositoryMockRecorder) List(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTaskRepository)(nil).List), ctx, filter)
}

// Update mocks base method.
func (m *MockTaskRepository) Update(ctx context.Context, task *task.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTaskRepositoryMockRecorder) Update(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskRepository)(nil).Update), ctx, task)
}
